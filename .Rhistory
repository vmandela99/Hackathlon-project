Transfer.model <- "KnowledgeTransfer =~ C1 + C2 + C3 + C4 + C5 + C6"
transfer.fit1 <- cfa(model = Transfer.model, data = Ghedi)
#INDEPENDENT VARIABLE 3
Knowledge_Application.model <- "KnowledgeApplication =~ D1 + D2 + D3 + D4 + D5 + D6"
application.fit1 <- cfa(model = Knowledge_Application.model, data = Ghedi)
#INDEPENDENT VARIABLE 4
HCR_overall.model <- 'HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5
HCREducation =~ EED1 + EED2 + EED3 + EED4 + EED5 + EED6 + EED7
HCRInnovativeness =~ EI1 + EI2 + EI3 + EI4 + EI5
HCRoverall =~ HCRExperience + HCREducation + HCRInnovativeness'
HCR1.fit <- cfa(model = HCR_overall.model, data = Ghedi)
summary(HCR1.fit, standardized = T, fit.measures = T)
#INDEPENDENT VARIABLE 4
HCR_overall.model <- 'HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5
HCREducation =~ EED1 + EED2 + EED3 + EED4 + EED5 + EED6 + EED7
HCRInnovativeness =~ EI1 + EI2 + EI3 + EI4 + EI5'
HCR1.fit <- cfa(model = HCR_overall.model, data = Ghedi)
summary(HCR1.fit, standardized = T, fit.measures = T)
#INDEPENDENT VARIABLE 4
HCR_overall.model <- 'HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5 + EI1 + EI2 + EI3 + EI4 + EI5'
HCR1.fit <- cfa(model = HCR_overall.model, data = Ghedi)
#INDEPENDENT VARIABLE 4
HCR_overall.model <- 'HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5 + EI1 + EI2 + EI3 + EI4 + EI5 + EED1 + EED2 + EED3 + EED4 + EED5 + EED6 + EED7'
HCR1.fit <- cfa(model = HCR_overall.model, data = Ghedi)
#INDEPENDENT VARIABLE 5
Firm_Culture_Futuristic_orientation.model <- "FirmCultureFuturisticorientation  =~ FF1 + FF2 + FF3 + FF4 + FO1 + FO2 + FO3 + FL1 + FL2 + FL3 + FL4 + FL5"
FCO11.fit <- cfa(model = Firm_Culture_Futuristic_orientation.model, data = Ghedi)
# entire modelmodel
model.model <- 'KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5
KnowledgeTransfer =~ C1 + C2 + C3 + C4 + C5 + C6
KnowledgeApplication =~ D1 + D2 + D3 + D4 + D5 + D6
HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5 + EI1 + EI2 + EI3 + EI4 + EI5 + EED1 + EED2 + EED3 + EED4 + EED5 + EED6 + EED7
FirmCultureFuturisticorientation  =~ FF1 + FF2 + FF3 + FF4 + FO1 + FO2 + FO3 + FL1 + FL2 + FL3 + FL4 + FL5
Performance =~ KM1 + KM2 +KM3 + KM4 + KM5 + KM6'
model_model.fit <- cfa(model.model,Ghedi)
summary(model_model.fit, standardized = TRUE, fit.measures = TRUE)
# entire modelmodel
model.model <- 'KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5
KnowledgeTransfer =~ C1 + C2 + C3 + C4 + C5 + C6
KnowledgeApplication =~ D1 + D2 + D3 + D4 + D5 + D6
HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5 + EI1 + EI2 + EI3 + EI4 + EI5 + EED1 + EED2 + EED3 + EED4 + EED5 + EED6 + EED7
FirmCultureFuturisticorientation  =~ FF1 + FF2 + FF3 + FF4 + FO1 + FO2 + FO3 + FL1 + FL2 + FL3 + FL4 + FL5'
model_model.fit <- cfa(model.model,Ghedi)
library("semPlot", lib.loc="~/R/win-library/3.5")
summary(model_model.fit, standardized = TRUE, fit.measures = TRUE)
deal <- Ghedi %>% select(BE1:KM6)
deal <- Ghedi %>% select(BE1:KM6) %>% filter(!is.na())
deal <- Ghedi %>% select(BE1:KM6) %>% filter(!is.na(BE1:KM6))
deal <- Ghedi %>% select(BE1:KM6) %>% summary(vari = var())
deal
# new model2
model2.model <- 'perf.fit ~ solid.fit7 + transfer.fit1 + application.fit1 + HCR1.fit + FCO11.fit'
model_model.fit <- cfa(model2.model,Ghedi)
anova(model2.model)
rm(list = ls())
##SEM
library(lavaan)
library(dplyr)
#ONE_FACTOR_MODEL_ANALYSIS
Ghedi_data <- readxl::read_xlsx("C:\\stata assignments\\almost complete\\masters for march\\PHD Mohammed Ghedi\\CLEAN SURVEY DATA.xlsx")
# Look at the dataset
data(Ghedi_data)
head(Ghedi_data)
Ghedi <- tbl_df(Ghedi_data)
#INDEPENDENT VARIABLE1
solid.model6 <- "KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5
BI1 ~~ BS3
BE2 ~~ BS1
BC3 ~~ BC4
BI2 ~~ BC1"
solid.fit6 <- cfa(model = solid.model6, data = Ghedi)
summary(solid.fit6, standardized = T, fit.measures = T)
modificationIndices(solid.fit6, sort = T)
solid.model7 <- "KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5"
BI1 ~~ BS3
BE2 ~~ BS1
BC3 ~~ BC4
BI2 ~~ BC1
solid.fit7 <- cfa(model = solid.model7, data = Ghedi)
summary(solid.fit7, standardized = T, fit.measures = T)
modificationIndices(solid.fit7, sort = T)
#significance of model 3
anova(solid.fit6, solid.fit7)
#INDEPENDENT VARIABLE2
Transfer.model <- "KnowledgeTransfer =~ C1 + C2 + C3 + C4 + C5 + C6"
C5 ~~  C6
transfer.fit1 <- cfa(model = Transfer.model, data = Ghedi)
summary(transfer.fit1, standardized = T, fit.measures = T)
modificationIndices(transfer.fit1, sort = T)
#significance of model 3
#anova(solid.fit6, solid.fit7)
#INDEPENDENT VARIABLE 3
Knowledge_Application.model <- "KnowledgeApplication =~ D1 + D2 + D3 + D4 + D5 + D6"
application.fit1 <- cfa(model = Knowledge_Application.model, data = Ghedi)
summary(application.fit1, standardized = T, fit.measures = T)
modificationIndices(application.fit1, sort = T)
#INDEPENDENT VARIABLE 4
HCR_overall.model <- 'HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5 + EI1 + EI2 + EI3 + EI4 + EI5 + EED1 + EED2 + EED3 + EED4 + EED5 + EED6 + EED7'
HCR1.fit <- cfa(model = HCR_overall.model, data = Ghedi)
summary(HCR1.fit, standardized = T, fit.measures = T)
modificationIndices(HCR1.fit, sort = T)
#INDEPENDENT VARIABLE 5
Firm_Culture_Futuristic_orientation.model <- "FirmCultureFuturisticorientation  =~ FF1 + FF2 + FF3 + FF4 + FO1 + FO2 + FO3 + FL1 + FL2 + FL3 + FL4 + FL5"
FCO11.fit <- cfa(model = Firm_Culture_Futuristic_orientation.model, data = Ghedi)
summary(FCO11.fit, standardized = T, fit.measures = T)
modificationIndices(HCR1.fit, sort = T)
#DEPENDENT VARIABLE
Performance.model <- "Performance =~ KM1 + KM2 +KM3 + KM4 + KM5 + KM6"
perf.fit <- cfa(model = Performance.model, data = Ghedi)
summary(FCO11.fit, standardized = T, fit.measures = T)
modificationIndices(HCR1.fit, sort = T)
# Analysis of the dependent models
perform.fit <- cfa(Performance.model,Ghedi_data)
summary(perform.fit, standardized = TRUE, fit.measures = TRUE)
# Looking at Std.all, we can tell that variables 7, 8, and 9 do not measure text speed very well, as these loading coefficients are close to zero.
# conclusions A
# We can see that our fit indices are poor, with low CFI and TLI and high RMSEA and SRMR values.
# conclusions B/ alternative
# Our standardized loadings indicate the items measure the latent variable well, but the fit indices are a mix of good values (high CFI, low SRMR) and bad values (low TLI, high RSMEA).
# new model2
model2.model <- 'perf.fit ~ solid.fit7 + transfer.fit1 + application.fit1 + HCR1.fit + FCO11.fit'
anova(model2.model)
model_model.fit <- cfa(model2.model,Ghedi)
summary(model_model.fit, standardized = TRUE, fit.measures = TRUE)
semPaths(model_model.fit, what = "std", whatLabels = "std", layout = "tree", rotation = 1, edge.color = "blue", edge.label.cex = 1.5)
# entire modelmodel
model.model <- 'KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5
KnowledgeTransfer =~ C1 + C2 + C3 + C4 + C5 + C6
KnowledgeApplication =~ D1 + D2 + D3 + D4 + D5 + D6
HCRExperience =~ EEX1 + EEX2 + EEX3 + EEX4 + EEX5 + EI1 + EI2 + EI3 + EI4 + EI5 + EED1 + EED2 + EED3 + EED4 + EED5 + EED6 + EED7
FirmCultureFuturisticorientation  =~ FF1 + FF2 + FF3 + FF4 + FO1 + FO2 + FO3 + FL1 + FL2 + FL3 + FL4 + FL5
Performance =~ KM1 + KM2 +KM3 + KM4 + KM5 + KM6'
model_model.fit <- cfa(model.model,Ghedi)
summary(model_model.fit, standardized = TRUE, fit.measures = TRUE)
semPaths(model_model.fit, what = "std", whatLabels = "std", layout = "tree", rotation = 1, edge.color = "blue", edge.label.cex = 1.5)
# new model2
model2.model <- 'perf.fit ~ solid.fit7 + transfer.fit1 + application.fit1 + HCR1.fit + FCO11.fit'
model_model.fit <- cfa(model2.model,Ghedi)
anova(model2.model)
# new model2
model2.model <- 'perf.fit =~ solid.fit7 + transfer.fit1 + application.fit1 + HCR1.fit + FCO11.fit'
model_model.fit <- cfa(model2.model,Ghedi)
# new model2
model3.model <- lm(perf.fit ~ solid.fit7 + transfer.fit1 + application.fit1 + HCR1.fit + FCO11.fit)
library("lavaan", lib.loc="~/R/win-library/3.5")
rm(list = ls())
library(dplyr)
#ONE_FACTOR_MODEL_ANALYSIS
Ghedi_data <- readxl::read_xlsx("C:\\stata assignments\\almost complete\\masters for march\\PHD Mohammed Ghedi\\CLEAN SURVEY DATA.xlsx")
Ghedi <- tbl_df(Ghedi_data)
#INDEPENDENT VARIABLE1
solid.model6 <- "KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5"
solid.fit6 <- cfa(model = solid.model6, data = Ghedi)
summary(solid.fit6, standardized = T, fit.measures = T)
modificationIndices(solid.fit6, sort = T)
#INDEPENDENT VARIABLE1
solid.model6 <- "KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5
BI1 ~~ BS3
BE2 ~~ BS1
BC3 ~~ BC4
BI2 ~~ BC1"
solid.fit6 <- cfa(model = solid.model6, data = Ghedi)
summary(solid.fit6, standardized = T, fit.measures = T)
solid.model7 <- "KnowExternalInternal =~ BE1 + BE2 + BI1 + BI2 + BI3 + BS1 + BS2 + BS3 + BI1 + BI2 + BI3 + BC1 + BC2 +BC3 + BC4 + BC5
BI1 ~~ BS3
BE2 ~~ BS1
BC3 ~~ BC4
BI2 ~~ BC1"
solid.fit7 <- cfa(model = solid.model7, data = Ghedi)
summary(solid.fit7, standardized = T, fit.measures = T)
library("semPlot", lib.loc="~/R/win-library/3.5")
semPaths(model_model.fit, what = "std", whatLabels = "std", layout = "tree", rotation = 1, edge.color = "blue", edge.label.cex = 1.5)
semPaths(solid.fit7, what = "std", whatLabels = "std", layout = "tree", rotation = 1, edge.color = "blue", edge.label.cex = 1.5)
library(dplyr)
library(plyr)
# use selected whole tabs
means <- Ghedi %>%
group_by(EED5:EED7) %>%
summarise(mns = mean())
View(solid.fit7)
# use selected whole tabs
means <- Ghedi %>%
group_by(EED5:EED7) %>%
summarise(mns = mean(EED5))
# use selected whole tabs
means <- Ghedi %>%
select(EED5:EED7) %>%
rdply(each(mean, var))
q()
feeds<-table(chicken$feed)
feeds<-table(chickenwts$feed)
dataset()
?dataset
?datasets
help = datasets
help = "datasets"
(help = "datasets")
library(help = "datasets")
feeds<-table(chickenwts$feed)
feeds<-table(chickwts$feed)
barplot(feeds)
?barplots
?barplot
barplot(feeds[order(feeds,decreasing = TRUE])
barplot(feeds[order(feeds,decreasing = TRUE)])
par(oma = c(1,1,1,1)) #set outside margins: b,l,t,r
par(mar = c(4,5,2,1)) #sets plot margins #run them at once.
barplot(feeds[order(feeds)],
horiz = TRUE,
las =1,
col = c("beige" , "blanchedalmond", "bisquel","bisque2","bisque3","bisque4"),
border = NA, #No border on bars
main = "Frequencies of Different Feeds\nin chickwts Dataset", #\n = line break
xlab = "Number of Chicks")
par(oma = c(1,1,1,1)) #set outside margins: b,l,t,r
barplot(feeds[order(feeds)],
horiz = TRUE,
las =1,
col = c("beige" , "blanchedalmond", "red","bisque2","bisque3","bisque4"),
border = NA, #No border on bars
main = "Frequencies of Different Feeds\nin chickwts Dataset", #\n = line break
xlab = "Number of Chicks")
barplot(feeds[order(feeds)],
horiz = TRUE,
las =1,
col = c("beige" , "blanchedalmond", "bisque1","bisque2","bisque3","bisque4"),
border = NA, #No border on bars
main = "Frequencies of Different Feeds\nin chickwts Dataset", #\n = line break
xlab = "Number of Chicks")
?warpbreaks
data <- tapply(warpbreak$breaks,
list(warpbreaks$wool,
warpbreaks$tension),
mean)
barplot(breaks~wool*tension, data = warpbreak)
data <- tapply(warpbreak$breaks,
list(warpbreaks$wool,
warpbreaks$tension),
mean)
data <- tapply(warpbreaks$breaks,
list(warpbreaks$wool,
warpbreaks$tension),
mean)
data
data1 <- tapply(
list(warpbreaks$wool,
warpbreaks$tension))
q()
library("rmarkdown", lib.loc="~/R/win-library/3.5")
library("tinytex", lib.loc="~/R/win-library/3.5")
install.packages("data.table")
install.packages("gdata")
install.packages("RMySQL")
?lappy
?plyr::lappy
library(plyr)
?lappy
??lapply
install.packages("httr")
install.packages("jsonlite")
best <- function(state, outcome) {
## read outcome data
## check that the state and outcome are valid
if (!is.element(state, state.abb)) {
stop("invalid state")
}
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
## return hospital name in that state w/ lowest 30-day death rate
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
best <- function(state, outcome) {
## read outcome data
## check that the state and outcome are valid
if (!is.element(state, state.abb)) {
stop("invalid state")
}
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
## return hospital name in that state w/ lowest 30-day death rate
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
)
best <- function(state, outcome) {
## read outcome data
## check that the state and outcome are valid
if (!is.element(state, state.abb)) {
stop("invalid state")
}
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
## return hospital name in that state w/ lowest 30-day death rate
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[, c(2, 7, colnum)]
names(data) <- c("hospital", "state", "outcome")
data <-  data[data$state == state, c("hospital", "outcome")]
data[, "outcome"] = as.numeric(data[, "outcome"])
data <- data[complete.cases(data), ]
data <- data[order(data[, "outcome"], data[, "hospital"]), ]
data[1, ]
# data <- lapply(data, function(dat) dat[order(dat[, "outcome"], dat[, "hospital"]), ])
}
Skip to content
Search or jump to…
Pull requests
Issues
Marketplace
Explore
@vmandela99
1
0 0 drraj/ProgAssignment3
Code  Pull requests 0  Projects 0  Wiki  Security  Insights
ProgAssignment3/functions_worked.R
[Lingjian Kong] these functions worked for assignment 3
576e67d on Apr 27, 2017
118 lines (111 sloc)  4.03 KB
best <- function(state, outcome) {
## read outcome data
## check that the state and outcome are valid
if (!is.element(state, state.abb)) {
stop("invalid state")
}
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
## return hospital name in that state w/ lowest 30-day death rate
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[, c(2, 7, colnum)]
names(data) <- c("hospital", "state", "outcome")
data <-  data[data$state == state, c("hospital", "outcome")]
data[, "outcome"] = as.numeric(data[, "outcome"])
data <- data[complete.cases(data), ]
data <- data[order(data[, "outcome"], data[, "hospital"]), ]
data[1, ]
# data <- lapply(data, function(dat) dat[order(dat[, "outcome"], dat[, "hospital"]), ])
}
rankhospital <- function(state, outcome, num = "best") {
if (!is.element(state, state.abb)) {
stop("invalid state")
}
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[, c(2, 7, colnum)]
names(data) <- c("hospital", "state", "outcome")
# sort by states
# note that, below is an inefficient way of sorting
# for efficient sorting based on outcome then on hospital name,
# see the function below
data <-  data[data$state == state, c("hospital", "outcome")]
data[, "outcome"] <- as.numeric(data[, "outcome"])
data <- data[complete.cases(data), ]
data <- data[order(data[, "outcome"]), ]
data <- split(data, data$outcome)
data <- lapply(data, function(arg) arg[order(arg[, "hospital"]), ])
data <- do.call("rbind", data)
data <- data[, c(1, 2)]
rownames(data) <- NULL
switch(num,
"best" = {num = 1},
"worst" = {num = nrow(data)})
if (!is.numeric(num)){
stop("invalid num")
}
data[num, ]
}
rankall <- function(outcome, num = "best") {
if (!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
switch(outcome,
"heart attack" = {colnum = 11},
"heart failure" = {colnum = 17},
"pneumonia" = {colnum = 23},
stop("invalid outcome"))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[, c(2, 7, colnum)]
names(data) <- c("hospital", "state", "outcome")
# sort by states
data[, "outcome"] <- as.numeric(data[, "outcome"])
data <- data[complete.cases(data), ]
data <- split(data, data$state)
# efficient ranking using order
data <- lapply(data, function(dat) dat[order(dat[, "outcome"], dat[, "hospital"]), ])
# read num
if (num == "best") {
num = 1
output <- c()
for (i in 1:length(data)){
output <- rbind(output, as.data.frame(data[[i]][1, ]))
}
}
else if (num == "worst") {
num <- sapply(data, function(dat) nrow(dat))
output <- c()
for (i in 1:length(data)){
# print("print below: ")
# print(data[[i]][num[i], ])
output <- rbind(output, as.data.frame(data[[i]][num[i], ]))
}
}
else if (!is.numeric(num)) {
stop("invalid num")
}
else {
output <- c()
for (i in 1:length(data)){
if(is.na(data[[i]][num, 2])){
data[[i]][num, 2] = data[[i]]$state[1]
}
output <- rbind(output, as.data.frame(data[[i]][num, ]))
}
}
output
# data <- sapply(data, function(dat, pos = 20) dat[pos, ])
}
View(data)
rm(list=ls())
library("rmarkdown", lib.loc="~/R/win-library/3.5")
library("tinytex", lib.loc="~/R/win-library/3.5")
commons_archive <- read_csv("../../data/commons_archive.csv", col_types = cols(DateCreated = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
install.packages("githubinstall")
library("githubinstall", lib.loc="~/R/win-library/3.5")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
library("githubinstall", lib.loc="~/R/win-library/3.5")
library("git2r", lib.loc="~/R/win-library/3.5")
file.exists("~/.ssh/id-rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
file.exists("~/.ssh/id-rsa.pub")
install.packages("haven")
?subset
?file.path
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(ggthemes)
setwd("C:/stata assignments/complete/Hackathlon data ibm")
detach(data)
data <- read.csv("hackathlon.csv", header = T, stringsAsFactors = T)
attach(data)
data1 <- data %>% select(3,13:20)
View(data1)
names(data1)
detach(data)
attach(data1)
data1 <- data %>% select(3,13:20) %>% filter(!is.na( Name.of.School))
View(data1)
summary(data1)
write.csv(data1, "cleaned data.csv", row.names = F)
names(data1)
data1 <- data %>% select(3,13:20) %>% filter(!is.na( Please.select.the.categories.you.are.interested.in..Academics.))
View(data1)
data2 <- data %>% select(3,13:20) %>% filter( Please.select.the.categories.you.are.interested.in..Academics.=="No" | Please.select.the.categories.you.are.interested.in..Academics. == "Yes")
#import your data as cleaned data
write.csv(data2,"cleaned hakathlon data.csv", row.names = F)
#clean up again
rm(list = ls())
#import the new data make sure you rename the columns using easier names in excel.
data <- read.csv("cleaned hakathlon data.csv", header = T, stringsAsFactors = T)
View(data)
names(data)
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity) %>% count()
View(data3)
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity) %>% filter(Safety_and_security == "Yes") count()
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity) %>% filter(Safety_and_security == "Yes") %>% count()
View(data3)
?rank
View(data3)
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)%>% mutate(no_with_safety = n(Safety_and_security == "Yes")%>% count()
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)%>% mutate(no_with_safety = n(Safety_and_security == "Yes"))%>% count()
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)%>% mutate(no_with_safety = n_distinct(Safety_and_security))%>% count()
View(data3)
names(data3)
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)%>% mutate(no_with_safety = n_distinct(Safety_and_security))
View(data3)
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)%>% county()
data3 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)%>% count()
View(data3)
#import your data as
write.csv(data3,"grouped by categories.csv", row.names = F)
?group_by
data4 <- data %>% group_by(Safety_and_security, Business_entrepreneurship_development, Career_development, STEM, Governance, Co_curricular_activities, Academics, Character_and_creativity)%>% summarise(n = sum(n))
